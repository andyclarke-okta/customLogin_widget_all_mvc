
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <title>Okta Sign-in Widget</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>

    <!-- Latest CDN production Javascript and CSS: 1.11.0 -->
    <script src="https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/@TempData["version"]/js/okta-sign-in.min.js" type="text/javascript"></script>
    <link href="https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/@TempData["version"]/css/okta-sign-in.min.css" type="text/css" rel="stylesheet">
    <!-- Theme file: Customize or replace this file if you want to override our default styles -->
    <link href="https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/@TempData["version"]/css/okta-theme.css" type="text/css" rel="stylesheet">

    <style type="text/css"></style>
</head>
<body>

    <div id="okta-login-container"></div>

    <form action="~/AltLanding/ImplicitLanding" method="post" id="oidcImplicit"  class="v-form" autocomplete="off" style="border:none;">
        @Html.ValidationSummary(true)
        @Html.AntiForgeryToken()
        <input id="idToken" name="idToken" type="hidden" value="" placeholder="" />
        <input id="relayState" name="relayState" type="hidden" value="" placeholder="" />
    </form>



 <script type="text/javascript">

    var myOktaOrg = "@TempData["oktaOrg"]";
    var myLocation = "none";
    var landing = "/AltLanding/UnprotectedLanding";

     // Handle GET / Querystring Params...
     function getParameterByName(name, url) {
         // Set default for url
         if (!url) url = window.location.href;
         name = name.replace(/[\[\]]/g, "\\$&");
         var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
             results = regex.exec(url);
         // If not found
         if (!results) return null;
         // If no value found
         if (!results[2]) return '';
         // Result found... just decode 1st.
         console.log('name', results[2]);
         var parameter_decoded = decodeURIComponent(results[2]);
         console.log('parameter_decoded', parameter_decoded);
         return decodeURIComponent(parameter_decoded);
     }

     // Handle the logic to prioritize the URL for redirect.
     function getOpt(o1, o2, o3) {
         // Set defaults for inbound
         if (o1 != null) return o1;
         if (o2 != null) return o2;
         if (o3 != null) return o3;
         return window.location.href;
     }

    (function () {
        var url = window.location.href;
        var arr = url.split("/");
        var result = arr[0] + "//" + arr[2];
        myLocation = result;

    })();


        //  Handle Return URLs
        //debugger;
        var relayState = getParameterByName('relaystate');
        if (relayState != null)
            console.log('relayState', relayState);

        var fromURI = getParameterByName('fromURI');
        if (fromURI != null)
            console.log('fromURI', fromURI);

        var MyInfo = getParameterByName('MyInfo');
        if (MyInfo != null)
            console.log('MyInfo', MyInfo);

        function getOpt() {
            //set hierarchy for choosing landing url
            var nextUrl = myLocation + landing;
            //var nextUrl = myOktaOrg;
            if (MyInfo != null) {
                nextUrl = MyInfo;
            }
            if (relayState != null) {
                nextUrl = relayState;
            }
            if (fromURI != null) {
                nextUrl = fromURI;
            }
            return nextUrl;
        }



        //bootstrap Okta widget
    var options = {
        baseUrl: myOktaOrg,
        logo: "/img/logo_acme.png",
        features: {
            registration: true,
            router: true,
            rememberMe: false,
            smsRecovery: true,
            callRecovery: true,
            windowsVerify: true,
            selfServiceUnlock: true,
            hideSignOutLinkInMFA: true,
            showPasswordToggleOnSignInPage: true,
            multiOptionalFactorEnroll: false
        },
        registration: {
            parseSchema: function (schema, onSuccess, onFailure) {
                // handle parseSchema callback
                // This will add an additional field to the registration form
                schema.profileSchema.properties.address = {
                    'type': 'string',
                    'description': 'Street Address',
                    'default': 'Enter your street address',
                    'maxLength': 255
                };
                schema.profileSchema.fieldOrder.push('city');
                onSuccess(schema);
            },
            preSubmit: function (postData, onSuccess, onFailure) {
                // handle preSubmit callback
                console.log(postData);
                onSuccess(postData);
            },
            postSubmit: function (response, onSuccess, onFailure) {
                // handle postsubmit callback
                console.log(response);
                onSuccess(response);
            }
        },
    };

    var oktaSignIn = new OktaSignIn(options);

     //declare Okta widget
        function showLoginWidget() {

            oktaSignIn.renderEl(
                { el: '#okta-login-container' },
                function (res) {

                    console.log('User Status ', res.status);
                    console.log('UserId ', res.user.id);

                    if (res.status === 'SUCCESS') {
                        console.log('User %s successfully authenticated %o', res.user.profile.login, res.user);
                        //debugger;
                        nextURI = getOpt();
                        // Set Session
                        res.session.setCookieAndRedirect(nextURI);
                    }
                },
                // Failure callback (invoked if the authentication is unsuccessful
                // or if there is a failure on authentication)
                function (err) {
                    // handleErrors(err);
                    console.log("failed to login: %o", err);
                }
            );
        }

    // Initiate the login Widget
    showLoginWidget();


    </script>
</body>
</html>


